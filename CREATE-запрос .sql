-- Домашнее задание к лекции «Введение в БД. Типы БД»
-- Задание 1 (практика)
-- Спроектировать схему — таблицы и связи между ними — для музыкального сайта. Требования:

-- на сайте должна быть возможность увидеть список музыкальных жанров;
-- 1 для каждого жанра можно получить список исполнителей, которые выступают в соответствующем жанре;
-- 2 для каждого исполнителя можно получить список его альбомов;
-- 3 для каждого альбома можно получить список треков, которые в него входят;
-- 4 у жанра есть название;
-- 5 у исполнителя есть имя (псевдоним) и жанр, в котором он исполняет;
-- 6  у альбома есть название, год выпуска и его исполнитель;
-- 7 у трека есть название, длительность и альбом, которому этот трек принадлежит.
-- Результатом работы является изображение в формате PNG, содержащее схему БД.
-- Для создания схем можно воспользоваться удобной платформой app.diagrams.net или любым другим графическим редактором.
-- Краткая шпаргалка по созданию схем БД на платформе app.diagrams.net находится в личном кабинете в занятии «Введение 
-- в базы данных. Типы баз данных».

-- Задание 2 
-- Домашнее задание к лекции «Работа с SQL. Создание БД»
-- Обязательная часть
-- Будем развивать схему для музыкального сервиса.
-- Ранее существовало ограничение, что каждый исполнитель поёт строго в одном жанре, пора его убрать. Исполнители могут 
-- петь в разных жанрах, как и одному жанру могут принадлежать несколько исполнителей.
-- Аналогичное ограничение было и с альбомами у исполнителей — альбом мог выпустить только один исполнитель. Теперь 
-- альбом могут выпустить несколько исполнителей вместе. Как и исполнитель может принимать участие во множестве альбомов.
-- С треками ничего не меняем, всё так же трек принадлежит строго одному альбому.
-- Но появилась новая сущность — сборник. Сборник имеет название и год выпуска. В него входят различные треки из разных альбомов.
-- Обратите внимание: один и тот же трек может присутствовать в разных сборниках.
-- Задание состоит из двух частей
-- Спроектировать и нарисовать схему, как в первой домашней работе. Прислать изображение со схемой.
-- Написать SQL-запросы, создающие спроектированную БД. Прислать ссылку на файл, содержащий SQL-запросы.
-- Примечание: можно прислать сначала схему, получить подтверждение, что схема верная, и после этого браться за написание запросов.

-- жанры
CREATE TABLE IF NOT EXISTS Genres (
    id SERIAL PRIMARY KEY,
    Name VARCHAR(40) NOT NULL
    );
-- Испольнители
CREATE TABLE IF NOT EXISTS Artists (
    id SERIAL PRIMARY KEY,
    Name VARCHAR (50) NOT NULL
    );
-- альбомы
CREATE TABLE IF NOT EXISTS Albums (
    id SERIAL PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    Release_Year INT
    );
-- треки
CREATE TABLE IF NOT EXISTS Tracks (
    id SERIAL PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    Duration INT,
    Album_id INT,
    foreign KEY (Album_id) REFERENCES Albums(id)
    );
-- Сборник
CREATE TABLE IF NOT EXISTS Compilations (
    id SERIAL PRIMARY KEY,
    title VARCHAR(50) NOT NULL,
    year INT
    );
-- связь жанр и исполнителей
CREATE TABLE IF NOT EXISTS Genre_Artists(
    genre_id INT,
    Artist_id INT,
    PRIMARY KEY (genre_id, Artist_id),
    foreign KEY (genre_id) REFERENCES Genres(id),
    foreign KEY (Artist_id) REFERENCES Artists(id)    
    );
-- Связть исполнитель альбом
CREATE TABLE IF NOT EXISTS Artist_Albums(
    Artist_id INT,
    Album_id INT,
    PRIMARY KEY (Artist_id, Album_id),
    foreign KEY (Artist_id) REFERENCES Artists(id),
    foreign KEY (Album_id) REFERENCES Albums(id)    
    );    
-- Связь сборник треки
CREATE TABLE IF NOT EXISTS CompilationTracks(
    compilation_id INT,
    track_id INT,
    PRIMARY KEY (compilation_id, track_id),
    foreign KEY (compilation_id) REFERENCES Compilations(id),
    foreign KEY (track_id) REFERENCES Tracks(id)   
    ); 


    
